{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://go-interface-annotations/./src/AnnotateLensProvider.ts","webpack://go-interface-annotations/./src/Annotation.ts","webpack://go-interface-annotations/./src/AnnotationLens.ts","webpack://go-interface-annotations/./src/SymbolInfo.ts","webpack://go-interface-annotations/external commonjs \"vscode\"","webpack://go-interface-annotations/webpack/bootstrap","webpack://go-interface-annotations/./src/extension.ts"],"sourcesContent":["import * as vscode from \"vscode\";\nimport { Annotation } from \"./Annotation\";\nimport { AnnotationLens } from \"./AnnotationLens\";\nimport { SymbolInfo } from \"./SymbolInfo\";\n\nexport class AnnotationLensProvider\n  implements vscode.CodeLensProvider<AnnotationLens>\n{\n  public async provideCodeLenses(\n    document: vscode.TextDocument\n  ): Promise<vscode.CodeLens[]> {\n    const goSymbols = await this.getGoSymbols(document);\n\n    const results: AnnotationLens[] = [];\n    for (const goSymbol of goSymbols) {\n      const symbolInfo = await SymbolInfo.create(goSymbol);\n      const activeEditor = vscode.window.activeTextEditor;\n      if (!activeEditor) {\n        return [];\n      }\n\n      const locations = await this.getSymbolLocations(activeEditor, symbolInfo) ?? [];\n      const symbols = await Promise.all(locations.map(SymbolInfo.getSymbol));\n      if (symbols.length === 0) {\n        continue;\n      }\n\n      const annotation = new Annotation(symbolInfo.symbol, symbols);\n      results.push(new AnnotationLens(annotation));\n    }\n\n    return results;\n  }\n\n  private async getSymbolLocations(te: vscode.TextEditor, si: SymbolInfo): Promise<vscode.Location[]> {\n    return vscode.commands.executeCommand<vscode.Location[]>(\n      \"vscode.executeImplementationProvider\",\n      te.document.uri,\n      si.symbol.location.range.start\n    );\n  }\n\n  private async getGoSymbols(document: vscode.TextDocument) {\n    const symbols = (await vscode.commands.executeCommand<\n      (vscode.SymbolInformation & vscode.DocumentSymbol)[]\n    >(\"vscode.executeDocumentSymbolProvider\", document.uri))!.filter(\n      (symbol) =>\n        symbol.kind === vscode.SymbolKind.Class ||\n        symbol.kind === vscode.SymbolKind.Struct ||\n        symbol.kind === vscode.SymbolKind.Interface\n    );\n    return symbols;\n  }\n}\n","import * as vscode from \"vscode\";\n\nexport class Annotation {\n  public constructor(\n    public readonly from: vscode.SymbolInformation & vscode.DocumentSymbol,\n    public readonly to: Array<vscode.SymbolInformation & vscode.DocumentSymbol>\n  ) {}\n}\n","import * as vscode from \"vscode\";\nimport { Annotation } from \"./Annotation\";\n\nexport class AnnotationLens extends vscode.CodeLens {\n  public constructor(annotation: Annotation) {\n    const from = annotation.from;\n    if (annotation.to.length === 1) {\n      super(from.location.range, {\n        command: \"editor.action.goToLocations\",\n        title: `@Implements ${annotation.to[0].name}`,\n        arguments: [\n          from.location.uri,\n          from.location.range.start,\n          [annotation.to[0].location],\n          \"goto\",\n        ],\n      });\n    } else {\n      super(from.location.range, {\n        command: \"editor.action.peekLocations\",\n        title: `@Implements ${mapAnnotationToString(annotation)}`,\n        arguments: [\n          from.location.uri,\n          from.location.range.start,\n          annotation.to.map((a) => a.location),\n          \"peek\",\n        ],\n      });\n    }\n  }\n}\n\nfunction mapAnnotationToString( annotation: Annotation): string {\n  return annotation.from.name + \" -> \" + annotation.to.map((a) => a.name).join(\", \");\n}","import * as vscode from \"vscode\";\n\nexport class SymbolInfo {\n  public readonly symbol: vscode.SymbolInformation & vscode.DocumentSymbol;\n\n  public static async create(\n    symbol: vscode.SymbolInformation & vscode.DocumentSymbol\n  ): Promise<SymbolInfo> {\n    const createdSymbolInfo = new SymbolInfo(symbol);\n    return createdSymbolInfo;\n  }\n\n  public static async getSymbol(\n    location: vscode.Location\n  ): Promise<vscode.SymbolInformation & vscode.DocumentSymbol> {\n    const documentSymbols = (await vscode.commands.executeCommand<\n      (vscode.SymbolInformation & vscode.DocumentSymbol)[]\n    >(\"vscode.executeDocumentSymbolProvider\", location.uri))!;\n    return documentSymbols.find((documentSymbol) =>\n      documentSymbol.range.start.isEqual(location.range.start)\n    ) as vscode.SymbolInformation & vscode.DocumentSymbol;\n  }\n\n  private constructor(\n    symbol: vscode.SymbolInformation & vscode.DocumentSymbol\n  ) {\n    this.symbol = symbol;\n\n    if (\n      this.symbol.kind !== vscode.SymbolKind.Class &&\n      this.symbol.kind !== vscode.SymbolKind.Struct &&\n      this.symbol.kind !== vscode.SymbolKind.Interface\n    ) {\n      throw new Error(\"Expected struct or interface\");\n    }\n  }\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from \"vscode\";\nimport { AnnotationLensProvider } from \"./AnnotateLensProvider\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.languages.registerCodeLensProvider(\n      [{ language: \"go\" }],\n      new AnnotationLensProvider()\n    )\n  );\n}\n\nexport function deactivate() {}\n"],"names":["async","document","goSymbols","this","getGoSymbols","results","goSymbol","symbolInfo","SymbolInfo","create","activeEditor","vscode","window","activeTextEditor","locations","getSymbolLocations","symbols","Promise","all","map","getSymbol","length","annotation","Annotation","symbol","push","AnnotationLens","te","si","commands","executeCommand","uri","location","range","start","filter","kind","SymbolKind","Class","Struct","Interface","from","to","CodeLens","super","command","title","name","arguments","mapAnnotationToString","a","join","static","find","documentSymbol","isEqual","Error","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","subscriptions","languages","registerCodeLensProvider","language","AnnotationLensProvider"],"sourceRoot":""}